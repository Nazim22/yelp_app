name: CI/CD Workflow

on:
  workflow_dispatch:  # ‚úÖ Manually triggered workflow
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # ‚úÖ Allows pushing manifest updates

jobs:
  checkout:
    name: üì• Checkout Repository
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  determine_version:
    name: üî¢ Determine Next Version
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: Fetch Latest Tag
        id: get_version
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag found: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Bump Version
        id: bump_version
        run: |
          if [[ -z "$LATEST_TAG" ]]; then
            new_version="1.0.0"
          else
            IFS='.' read -r major minor patch <<<"${LATEST_TAG//v/}"
            if git log -1 --pretty=%B | grep -q "#major"; then
              new_version="$((major+1)).0.0"
            elif git log -1 --pretty=%B | grep -q "#minor"; then
              new_version="$major.$((minor+1)).0"
            else
              new_version="$major.$minor.$((patch+1))"
            fi
          fi
          echo "New version: v$new_version"
          echo "VERSION=v$new_version" >> $GITHUB_ENV

      - name: Push New Tag
        run: |
          git tag $VERSION
          git push origin $VERSION

  build:
    name: üõ† Build and Install Dependencies
    runs-on: self-hosted
    needs: determine_version
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

  code-scan:
    name: üîç SonarQube Code Analysis
    runs-on: self-hosted
    needs: build
    steps:
      - name: Run SonarQube Code Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=yelp-app
            -Dsonar.organization=my-org
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  docker_build:
    name: üê≥ Build Docker Image with Semantic Versioning
    runs-on: self-hosted
    needs: code-scan
    steps:
      - name: Build Docker Image
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:${{ env.VERSION }}"
          docker build -t $IMAGE_TAG \
            --build-arg MAPBOX_TOKEN="${{ secrets.MAPBOX_TOKEN }}" \
            --build-arg DB_URL="${{ secrets.DB_URL }}" \
            --build-arg CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}" \
            --build-arg CLOUDINARY_KEY="${{ secrets.CLOUDINARY_KEY }}" \
            --build-arg CLOUDINARY_SECRET="${{ secrets.CLOUDINARY_SECRET }}" .

  trivy_scan:
    name: üõ°Ô∏è Trivy Security Scan (Fixed)
    runs-on: self-hosted
    needs: docker_build
    steps:
      - name: Ensure Image Exists Locally
        run: docker images | grep "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app" || exit 1  # ‚úÖ Ensures image exists

      - name: Run Trivy Image Scan (Fixed)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:${{ env.VERSION }}"  # ‚úÖ Uses locally built image
          format: 'table'
          severity: 'HIGH,CRITICAL'

  docker_push:
    name: üöÄ Push Docker Image to Docker Hub
    runs-on: self-hosted
    needs: trivy_scan
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Versioned Image
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:${{ env.VERSION }}"

      - name: Tag & Push Latest
        run: |
          docker tag "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:${{ env.VERSION }}" "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:latest"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:latest"

  update_k8s_manifest:
    name: üìÑ Update Kubernetes Deployment with New Image Tag
    runs-on: self-hosted
    needs: docker_push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Update Image Tag in Kubernetes Deployment
        run: |
          sed -i "s|image: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/yelp-app:${{ env.VERSION }}|" K8s/yelp-app-deployment.yaml

      - name: Commit and Push Updated Manifest
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add K8s/yelp-app-deployment.yaml
          git commit -m "Update image tag to ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin main

